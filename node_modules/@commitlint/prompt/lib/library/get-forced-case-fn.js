"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const camelCase_1 = __importDefault(require("lodash/camelCase"));
const kebabCase_1 = __importDefault(require("lodash/kebabCase"));
const snakeCase_1 = __importDefault(require("lodash/snakeCase"));
const upperFirst_1 = __importDefault(require("lodash/upperFirst"));
const startCase_1 = __importDefault(require("lodash/startCase"));
const utils_1 = require("./utils");
/**
 * Get forced case for rule
 * @param rule to parse
 * @return transform function applying the enforced case
 */
function getForcedCaseFn(rule) {
    const noop = (input) => input;
    if (!rule || !utils_1.ruleIsActive(rule) || utils_1.ruleIsNotApplicable(rule)) {
        return noop;
    }
    const target = rule[1][2];
    if (Array.isArray(target)) {
        return noop;
    }
    switch (target) {
        case 'camel-case':
            return (input) => camelCase_1.default(input);
        case 'kebab-case':
            return (input) => kebabCase_1.default(input);
        case 'snake-case':
            return (input) => snakeCase_1.default(input);
        case 'pascal-case':
            return (input) => upperFirst_1.default(camelCase_1.default(input));
        case 'start-case':
            return (input) => startCase_1.default(input);
        case 'upper-case':
        case 'uppercase':
            return (input) => input.toUpperCase();
        case 'sentence-case':
        case 'sentencecase':
            return (input) => `${input.charAt(0).toUpperCase()}${input.substring(1).toLowerCase()}`;
        case 'lower-case':
        case 'lowercase':
        case 'lowerCase': // Backwards compat config-angular v4
            return (input) => input.toLowerCase();
        default:
            throw new TypeError(`Unknown target case "${target}"`);
    }
}
exports.default = getForcedCaseFn;
//# sourceMappingURL=get-forced-case-fn.js.map