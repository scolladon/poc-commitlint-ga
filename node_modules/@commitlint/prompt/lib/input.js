"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const load_1 = __importDefault(require("@commitlint/load"));
const throat_1 = __importDefault(require("throat"));
const format_1 = __importDefault(require("./library/format"));
const get_prompt_1 = __importDefault(require("./library/get-prompt"));
const settings_1 = __importDefault(require("./settings"));
const utils_1 = require("./library/utils");
exports.default = input;
/**
 * Get user input by interactive prompt based on
 * conventional-changelog-lint rules.
 * @param prompter
 * @return commit message
 */
async function input(prompter) {
    const results = {
        type: null,
        scope: null,
        subject: null,
        body: null,
        footer: null,
    };
    const { rules } = await load_1.default();
    const parts = ['type', 'scope', 'subject', 'body', 'footer'];
    const headerParts = ['type', 'scope', 'subject'];
    const headerLengthRule = utils_1.getRules('header', rules).find(utils_1.getHasName('max-length'));
    const maxLength = utils_1.getMaxLength(headerLengthRule);
    await Promise.all(parts.map(throat_1.default(1, async (input) => {
        const inputRules = utils_1.getRules(input, rules);
        const inputSettings = settings_1.default[input];
        if (headerParts.includes(input) && maxLength < Infinity) {
            inputSettings.header = {
                length: maxLength,
            };
        }
        results[input] = await get_prompt_1.default(input, {
            rules: inputRules,
            settings: inputSettings,
            results,
            prompter,
        });
    }))).catch((err) => {
        console.error(err);
        return '';
    });
    // Return the results
    return format_1.default(results);
}
//# sourceMappingURL=input.js.map